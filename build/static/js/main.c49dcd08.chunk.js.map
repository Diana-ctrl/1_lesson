{"version":3,"sources":["ToDoList.module.css","AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","label","onChange","event","currentTarget","value","onKeyPress","e","ctrlKey","key","helperText","Button","color","size","startIcon","onClick","EditableSpan","title","setTitle","editMode","setEditMode","onBlur","setNewTitle","autoFocus","onDoubleClick","ToDoList","tasksJSXelements","tasks","map","t","className","isDone","id","Checkbox","checked","changeTaskStatus","inputProps","changeTaskTitle","IconButton","removeTask","Delete","changeToDoListTitle","removeTodoList","addTask","ButtonGroup","filter","changeFilter","todolistsReducer","todoLists","action","type","newTodoList","tasksReducer","toDoListID","task","taskID","newTask","v1","todoListID","App","toDoList_1","toDoList_2","useReducer","dispatchTasks","dispatchTodoLists","RemoveTaskAC","AddTaskAC","ChangeTaskStatusAC","ChangeTaskTitleAC","ChangeFinterAC","ChangeTodolistTitleAC","todoListsComponents","tasksForRender","Grid","item","Paper","style","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","AddTodoListAC","AddStateForNewTodoListAC","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c49dcd08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ant-btn-primary\":\"ToDoList_ant-btn-primary__3Uu5l\"};","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { useState } from 'react';\nimport { Button } from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';\n\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = (props: AddItemFormPropsType) => {\n\n    const [newTaskTitle, setNewTaskTitle] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    // const errorInputStyle = { border: '2px solid red', outline: 'none' }\n\n    const onNewTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(false);\n        setNewTaskTitle(event.currentTarget.value)\n    };\n    // const errorMessageStyle = error ? <div style={{ backgroundColor: 'red', color: 'white', fontWeight: 900, textAlign: 'center' }}>Title is required</div> : '';\n\n    const addItem = () => {\n        const trimmedTitle = newTaskTitle.trim();\n        if (newTaskTitle.trim()) {\n            props.addItem(trimmedTitle);\n            setNewTaskTitle('');\n        } else {\n            setError(true);\n        }\n        setNewTaskTitle('');\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey || e.key === 'Enter') {\n            addItem();\n        }\n    };\n\n    return (\n        <div>\n            <TextField\n                error={error}\n                // style={error ? errorInputStyle : undefined}\n                variant='outlined'\n                label='Enter title...'\n                onChange={onNewTitleChangeHandler}\n                value={newTaskTitle}\n                onKeyPress={onKeyPressHandler}\n                helperText={error ? 'Title is required' : ''}\n            />\n            {/* {errorMessageStyle} */}\n            <Button variant='contained' color='secondary' size='medium'\n                startIcon={<SaveIcon />} onClick={addItem}>Save</Button>\n        </div>\n    )\n}\nexport default AddItemForm;","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\n\ntype EditableSpanType = {\n    title: string\n    setNewTitle: (title: string) => void\n}\n\nconst EditableSpan = (props: EditableSpanType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const onEditMode = () => setEditMode(true);\n\n\n    const offEditMode = () => {\n        setEditMode(false);\n        props.setNewTitle(title);\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    }\n\n    return (\n        editMode\n            ? <TextField onBlur={offEditMode} autoFocus onChange={changeTitle} value={title} />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n\n    )\n}\n\nexport default EditableSpan;","import React from 'react';\nimport { TaskType, FilterValuesType } from './App';\nimport AddItemForm from './AddItemForm';\nimport EditableSpan from './EditableSpan';\nimport { Button, IconButton, ButtonGroup } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\ntype TodoListPropsType = {\n    title: string\n    id: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (taskID: string, toDoListID: string) => void\n    changeFilter: (filter: FilterValuesType, toDoListID: string) => void\n    addTask: (title: string, toDoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeToDoListTitle: (title: string, todoListID: string) => void\n    changeTaskTitle: (taskID: string, title: string, toDoListID: string) => void\n}\n\nconst ToDoList: React.FC<TodoListPropsType> = (props: TodoListPropsType) => {\n\n    const tasksJSXelements = props.tasks.map(t => {\n        const changeTaskTitle = (title: string) => {\n            props.changeTaskTitle(t.id, title, props.id)\n        }\n\n        return (\n            <li className={t.isDone === true ? 'is-done' : ''} key={t.id}>\n                <Checkbox\n                    checked={t.isDone}\n                    onChange={(e) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)}\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\n                />\n\n                {/* <input\n                    type=\"checkbox\"\n                    onChange={(e) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)}\n                    checked={t.isDone}\n                    value={t.title}\n                /> */}\n                <EditableSpan title={t.title} setNewTitle={changeTaskTitle} />\n                <IconButton onClick={() => props.removeTask(t.id, props.id)}>\n                    <Delete />\n                </IconButton>\n\n            </li>\n        )\n    })\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.id);\n    }\n\n    const removeTodoList = () => props.removeTodoList(props.id);\n    const setAll = () => props.changeFilter('all', props.id);\n    const setActive = () => props.changeFilter('active', props.id);\n    const setCompleted = () => props.changeFilter('completed', props.id);\n    // const classForAll = props.filter === 'all' ? 'active-filter' : '';\n    // const classForActive = props.filter === 'active' ? 'active-filter' : '';\n    // const classForCompleted = props.filter === 'completed' ? 'active-filter' : '';\n\n    const changeToDoListTitle = (title: string) => {\n        props.changeToDoListTitle(title, props.id)\n    }\n\n    return (\n        <div className='toDoList'>\n            <div>\n                <h3><EditableSpan title={props.title} setNewTitle={changeToDoListTitle} /></h3>\n                <IconButton onClick={removeTodoList}>\n                    <Delete />\n                </IconButton>\n            </div>\n            <AddItemForm addItem={addTask} />\n            <ul>\n                {tasksJSXelements}\n            </ul>\n            <div>\n                <ButtonGroup\n                    variant={'contained'}\n                    size={'small'}>\n                    <Button\n                        variant={props.filter === 'all' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setAll}>All</Button>\n                    <Button\n                        variant={props.filter === 'active' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setActive}>Active</Button>\n                    <Button\n                        variant={props.filter === 'completed' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setCompleted}>Completed</Button>\n                </ButtonGroup>\n            </div>\n        </div>\n    )\n}\nexport default ToDoList;\n","\nimport { TodoListType, FilterValuesType } from '../App'\n\ntype RemoveTodoListAT = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\n\ntype AddTodoListAT = {\n    type: 'ADD-TODOLIST'\n    id: string\n    title: string\n}\n\ntype ChangeTodolistTitleAT = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string,\n    id: string\n}\n\ntype ChangeFinterAT = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    filter: FilterValuesType\n    id: string\n}\n\nexport type AllACType = ChangeFinterAT | ChangeTodolistTitleAT | AddTodoListAT | RemoveTodoListAT;\n\n\nexport const RemoveTodolistAC = (id: string): RemoveTodoListAT => {\n    return { type: 'REMOVE-TODOLIST', id }\n}\n\nexport const AddTodoListAC = (title: string, todoListID: string): AddTodoListAT => {\n    return { type: 'ADD-TODOLIST', id: todoListID, title  }\n}\n\nexport const ChangeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleAT => {\n    return { type: 'CHANGE-TODOLIST-TITLE', id, title }\n}\n\nexport const ChangeFinterAC = (id: string, filter: FilterValuesType): ChangeFinterAT => {\n    return { type: 'CHANGE-TODOLIST-FILTER', id, filter }\n}\n\nexport const todolistsReducer = (todoLists: Array<TodoListType>, action: AllACType): Array<TodoListType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return todoLists.filter(t => t.id !== action.id);\n        case 'ADD-TODOLIST':\n            const newTodoList: TodoListType = {\n                id: action.id,\n                title: action.title,\n                filter: 'all'\n            }\n            return ([...todoLists, newTodoList])\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return todoLists.map(t => t.id === action.id ?\n                { ...t, title: action.title } : t);\n\n        case 'CHANGE-TODOLIST-FILTER':\n            return todoLists.map(t => t.id === action.id ? { ...t, filter: action.filter } : t)\n\n        default:\n            return todoLists;\n    }\n\n}","\nimport { TasksStateType, TaskType } from '../App'\nimport { v1 } from 'uuid';\n\ntype RemoveTaskAT = {\n    type: 'REMOVE-TASK'\n    taskID: string,\n    toDoListID: string\n}\n\ntype AddTaskAT = {\n    type: 'ADD-TASK'\n    title: string,\n    toDoListID: string\n}\n\ntype ChangeTaskTitleAT = {\n    type: 'CHANGE-TASK-TITLE'\n    taskID: string,\n    title: string,\n    toDoListID: string\n}\n\ntype ChangeTaskStatusAT = {\n    type: 'CHANGE-TASK-STATUS'\n    taskID: string,\n    isDone: boolean,\n    toDoListID: string\n}\n\ntype AddStateForNewTodoListAT = ReturnType<typeof AddStateForNewTodoListAC>\n\nexport type AllACType = RemoveTaskAT | AddTaskAT | ChangeTaskTitleAT | ChangeTaskStatusAT | AddStateForNewTodoListAT ;\n\n\nexport const RemoveTaskAC = (taskID: string, toDoListID: string): RemoveTaskAT => {\n    return { type: 'REMOVE-TASK', taskID, toDoListID } as const;\n}\n\nexport const AddTaskAC = (title: string, toDoListID: string): AddTaskAT => {\n    return { type: 'ADD-TASK', title, toDoListID } as const;\n}\n\nexport const ChangeTaskTitleAC = (taskID: string, title: string, toDoListID: string): ChangeTaskTitleAT => {\n    return { type: 'CHANGE-TASK-TITLE', taskID, title, toDoListID } as const;\n}\n\nexport const ChangeTaskStatusAC = (taskID: string, isDone: boolean, toDoListID: string): ChangeTaskStatusAT => {\n    return { type: 'CHANGE-TASK-STATUS', taskID, isDone, toDoListID } as const;\n}\nexport const AddStateForNewTodoListAC = (todoListID: string) => {\n    return {type: 'ADD-NEW-STATE-FOR-TODOLIST', todoListID } as const;\n}\n\nexport const tasksReducer = (tasks: TasksStateType, action: AllACType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return { ...tasks, [action.toDoListID]: tasks[action.toDoListID].filter(task => task.id !== action.taskID) };\n\n        case 'ADD-TASK':\n            const newTask: TaskType = {\n                id: v1(),\n                title: action.title,\n                isDone: false,\n            }\n            return ({\n                ...tasks,\n                [action.toDoListID]: [newTask, ...tasks[action.toDoListID]]\n            });\n\n        case 'CHANGE-TASK-TITLE':\n            return {\n                ...tasks,\n                [action.toDoListID]: tasks[action.toDoListID].map(t => t.id === action.taskID ? { ...t, title: action.title } : t)\n            };\n\n        case 'CHANGE-TASK-STATUS':\n            return {\n                ...tasks,\n                [action.toDoListID]: tasks[action.toDoListID].map(t => t.id === action.taskID ? { ...t, isDone: action.isDone } : t)\n            };\n        case 'ADD-NEW-STATE-FOR-TODOLIST': \n        return {...tasks, [action.todoListID] : []}\n\n        default:\n            return tasks;\n    }\n\n}","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from './ToDoList';\r\nimport { useReducer } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport { todolistsReducer, RemoveTodolistAC, AddTodoListAC, ChangeTodolistTitleAC, ChangeFinterAC } from './store/todolists-reducer';\r\nimport {tasksReducer, RemoveTaskAC, AddTaskAC, ChangeTaskTitleAC, ChangeTaskStatusAC, AddStateForNewTodoListAC } from './store/tasks-reducer';\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType,\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n    const toDoList_1 = v1();\r\n    const toDoList_2 = v1();\r\n\r\n    let [tasks, dispatchTasks] = useReducer(tasksReducer, {\r\n        [toDoList_1]: [\r\n            { id: v1(), title: 'HTML', isDone: true },\r\n            { id: v1(), title: 'CSS', isDone: true },\r\n            { id: v1(), title: 'React', isDone: false },\r\n            { id: v1(), title: 'Redux', isDone: false }\r\n        ],\r\n        [toDoList_2]: [\r\n            { id: v1(), title: 'Milk', isDone: true },\r\n            { id: v1(), title: 'Bread', isDone: true },\r\n            { id: v1(), title: 'Bear', isDone: true }\r\n        ]\r\n    });\r\n\r\n    let [todoLists, dispatchTodoLists] = useReducer(todolistsReducer, [\r\n        { id: toDoList_1, title: 'What to learn?', filter: 'all' },\r\n        { id: toDoList_2, title: 'What to buy?', filter: 'all' }\r\n    ]);\r\n    // let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    //     { id: toDoList_1, title: 'What to learn?', filter: 'all' },\r\n    //     { id: toDoList_2, title: 'What to buy?', filter: 'all' }\r\n    // ]);\r\n    // let [filter, setFilter] = useState<FilterValuesType>('all')\r\n\r\n    const removeTask = (taskID: string, toDoListID: string) => {\r\n        dispatchTasks(RemoveTaskAC(taskID, toDoListID));\r\n    };\r\n\r\n    const addTask = (title: string, toDoListID: string) => {\r\n        dispatchTasks(AddTaskAC(title, toDoListID));\r\n        // const newTask: TaskType = {\r\n        //     id: v1(),\r\n        //     title, // title: title,\r\n        //     isDone: false,\r\n        // }\r\n        // setTasks({\r\n        //     ...tasks,\r\n        //     [toDoListID]: [newTask, ...tasks[toDoListID]]\r\n        // });\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, toDoListID: string) => {\r\n        dispatchTasks(ChangeTaskStatusAC(taskID, isDone, toDoListID));\r\n        // setTasks({\r\n        //     ...tasks,\r\n        //     [toDoListID]: tasks[toDoListID].map(t => t.id === taskID ? { ...t, isDone } : t)\r\n        // });   //isDone = isDone:isDone\r\n    }\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, toDoListID: string) => {\r\n        dispatchTasks(ChangeTaskTitleAC(taskID, title, toDoListID))\r\n        // setTasks({\r\n        //     ...tasks,\r\n        //     [toDoListID]: tasks[toDoListID].map(t => t.id === taskID ? { ...t, title } : t)\r\n        // });   //isDone = isDone:isDone\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        dispatchTodoLists(ChangeFinterAC(todoListID, filter));// setTodoLists(todoLists.map(t => t.id === todoListID ? { ...t, filter } : t));\r\n    }\r\n    const changeToDoListTitle = (title: string, todoListID: string) => {\r\n        dispatchTodoLists(ChangeTodolistTitleAC(title, todoListID)); // setTodoLists(todoLists.map(t => t.id === todoListID ? { ...t, title } : t));\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        dispatchTodoLists(RemoveTodolistAC(todoListID)); // setTodoLists(todoLists.filter(t => t.id !== todoListID));\r\n                                                        // delete tasks[todoListID];\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        let todoListID = v1();\r\n        dispatchTodoLists(AddTodoListAC(title, todoListID));\r\n        dispatchTasks(AddStateForNewTodoListAC(todoListID))\r\n        // const todoListID = v1()\r\n        // const newTodoList: TodoListType = {\r\n        //     id: todoListID,\r\n        //     title,\r\n        //     filter: 'all'\r\n        // }\r\n        // setTodoLists([...todoLists, newTodoList])\r\n        // setTasks({ [todoListID]: [], ...tasks })\r\n    }\r\n    const todoListsComponents = todoLists.map(t => {\r\n        let tasksForRender: Array<TaskType> = tasks[t.id];\r\n        if (t.filter === 'active') {\r\n            tasksForRender = tasks[t.id].filter((t: TaskType) => t.isDone === false)\r\n        } else if (t.filter === 'completed') {\r\n            tasksForRender = tasks[t.id].filter((t: TaskType) => t.isDone === true)\r\n        }\r\n        return (\r\n            <Grid item>\r\n                <Paper style={{ padding: '15px' }}>\r\n                    <ToDoList\r\n                        key={t.id}\r\n                        id={t.id}\r\n                        filter={t.filter}\r\n                        title={t.title}\r\n                        tasks={tasksForRender}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeFilter={changeFilter}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeToDoListTitle={changeToDoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>)\r\n    })\r\n\r\n    return (\r\n        <div className='App'>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar style={{ justifyContent: \"space-between\" }}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{ padding: '15px' }}>\r\n                    <AddItemForm addItem={addTodoList} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './ToDoList.module.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}