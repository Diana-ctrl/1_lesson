{"version":3,"sources":["ToDoList.module.css","AddItemForm.tsx","EditableSpan.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","TaskWithSelectors.tsx","ToDoList.tsx","AppWithRedux.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["module","exports","AddItemForm","React","memo","props","console","log","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","label","onChange","event","currentTarget","value","onKeyPress","e","ctrlKey","key","helperText","Button","color","size","startIcon","onClick","EditableSpan","title","setTitle","editMode","setEditMode","onBlur","setNewTitle","autoFocus","onDoubleClick","todolistID1","v1","todolistID2","todolistID3","initialState","id","filter","isDone","RemoveTaskAC","taskID","toDoListID","type","ChangeTaskTitleAC","ChangeTaskStatusAC","TaskWithSelectors","todoListID","task","useSelector","state","tasks","t","dispatch","useDispatch","changeTaskTitle","useCallback","className","Checkbox","checked","IconButton","Delete","ToDoList","tasksForTodolist","tasksJSXelements","map","addTask","removeTodoList","setAll","changeFilter","setActive","setCompleted","changeToDoListTitle","ButtonGroup","AppWithRedux","todoLists","todolists","removeTask","AddTaskAC","changeTaskStatus","ChangeFinterAC","ChangeTodolistTitleAC","addTodoList","AddTodoListAC","todoListsComponents","tasksForRender","Grid","item","Paper","style","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newTask","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.22507c0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ant-btn-primary\":\"ToDoList_ant-btn-primary__3Uu5l\"};","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { useState } from 'react';\nimport { Button } from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';\n\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log('Add Item Form');\n\n    const [newTaskTitle, setNewTaskTitle] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    // const errorInputStyle = { border: '2px solid red', outline: 'none' }\n\n    const onNewTitleChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(false);\n        setNewTaskTitle(event.currentTarget.value)\n    };\n    // const errorMessageStyle = error ? <div style={{ backgroundColor: 'red', color: 'white', fontWeight: 900, textAlign: 'center' }}>Title is required</div> : '';\n\n    const addItem = () => {\n        const trimmedTitle = newTaskTitle.trim();\n        if (newTaskTitle.trim()) {\n            props.addItem(trimmedTitle);\n            setNewTaskTitle('');\n        } else {\n            setError(true);\n        }\n        setNewTaskTitle('');\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.ctrlKey || e.key === 'Enter') {\n            addItem();\n        }\n    };\n\n    return (\n        <div>\n            <TextField\n                error={error}\n                // style={error ? errorInputStyle : undefined}\n                variant='outlined'\n                label='Enter title...'\n                onChange={onNewTitleChangeHandler}\n                value={newTaskTitle}\n                onKeyPress={onKeyPressHandler}\n                helperText={error ? 'Title is required' : ''}\n            />\n            {/* {errorMessageStyle} */}\n            <Button variant='contained' color='secondary' size='medium'\n                startIcon={<SaveIcon />} onClick={addItem}>Save</Button>\n        </div>\n    )\n})\nexport default AddItemForm;","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\n\ntype EditableSpanType = {\n    title: string\n    setNewTitle: (title: string) => void\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const onEditMode = () => setEditMode(true);\n\n\n    const offEditMode = () => {\n        setEditMode(false);\n        props.setNewTitle(title);\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    }\n\n    return (\n        editMode\n            ? <TextField onBlur={offEditMode} autoFocus onChange={changeTitle} value={title} />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n\n    )\n});\n\nexport default EditableSpan; ","import { FilterValuesType } from '../App';\nimport { v1 } from 'uuid';\n\nexport type RemoveTodoListAT = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\n\nexport type AddTodoListAT = {\n    type: 'ADD-TODOLIST'\n    todoListID: string\n    title: string\n}\n\ntype ChangeTodolistTitleAT = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string,\n    id: string\n}\nexport type TodoListType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType,\n}\n\ntype ChangeFinterAT = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    filter: FilterValuesType\n    id: string\n}\nexport let todolistID1 = v1();\nexport let todolistID2 = v1();\nexport let todolistID3 = v1();\n\nlet initialState: Array<TodoListType> = [\n    { id: todolistID1, title: 'What should I do before new year', filter: 'all' },\n    { id: todolistID2, title: 'What to learn?', filter: 'all' },\n    { id: todolistID3, title: 'What to buy?', filter: 'all' },\n]\n\nexport type AllACType = ChangeFinterAT | ChangeTodolistTitleAT | AddTodoListAT | RemoveTodoListAT;\n\n\nexport const RemoveTodolistAC = (id: string): RemoveTodoListAT => {\n    return { type: 'REMOVE-TODOLIST', id }\n}\n\nexport const AddTodoListAC = (title: string): AddTodoListAT => {\n    return { type: 'ADD-TODOLIST', todoListID: v1(), title }\n}\n\nexport const ChangeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleAT => {\n    return { type: 'CHANGE-TODOLIST-TITLE', id, title }\n}\n\nexport const ChangeFinterAC = (id: string, filter: FilterValuesType): ChangeFinterAT => {\n    return { type: 'CHANGE-TODOLIST-FILTER', id, filter }\n}\n\nexport const todolistsReducer = (todoLists = initialState, action: AllACType): Array<TodoListType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return todoLists.filter(t => t.id !== action.id);\n        case 'ADD-TODOLIST':\n            const newTodoList: TodoListType = {\n                id: action.todoListID,\n                title: action.title,\n                filter: 'all'\n            }\n            return ([...todoLists, newTodoList])\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return todoLists.map(t => t.id === action.id ?\n                { ...t, title: action.title } : t);\n\n        case 'CHANGE-TODOLIST-FILTER':\n            return todoLists.map(t => t.id === action.id ? { ...t, filter: action.filter } : t)\n\n        default:\n            return todoLists;\n    }\n\n}","\nimport { v1 } from 'uuid';\nimport { AddTodoListAT, RemoveTodoListAT, todolistID1, todolistID2, todolistID3 } from './todolists-reducer';\ntype TaskType = {\n    id: string,\n    title: string,\n    isDone: boolean,\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\ntype RemoveTaskAT = {\n    type: 'REMOVE-TASK'\n    taskID: string,\n    toDoListID: string\n}\n\ntype AddTaskAT = {\n    type: 'ADD-TASK'\n    title: string,\n    toDoListID: string\n}\n\ntype ChangeTaskTitleAT = {\n    type: 'CHANGE-TASK-TITLE'\n    taskID: string,\n    title: string,\n    toDoListID: string\n}\n\ntype ChangeTaskStatusAT = {\n    type: 'CHANGE-TASK-STATUS'\n    taskID: string,\n    isDone: boolean,\n    toDoListID: string\n}\n\nconst initialState: TasksStateType = {\n    [todolistID1]: [\n        { id: v1(), title: 'Buy gifts', isDone: true },\n        { id: v1(), title: 'Create a holiday menu', isDone: false },\n        { id: v1(), title: 'To buy a dress', isDone: false },\n        { id: v1(), title: 'Prepare wishes', isDone: false }\n    ],\n\n    [todolistID2]: [\n        { id: v1(), title: 'HTML', isDone: true },\n        { id: v1(), title: 'CSS', isDone: true },\n        { id: v1(), title: 'React', isDone: false },\n        { id: v1(), title: 'Redux', isDone: false }\n    ],\n    [todolistID3]: [\n        { id: v1(), title: 'Milk', isDone: true },\n        { id: v1(), title: 'Bread', isDone: true },\n        { id: v1(), title: 'Bear', isDone: true }\n    ]\n}\nexport type AllActionType = RemoveTaskAT | AddTaskAT | ChangeTaskTitleAT | ChangeTaskStatusAT | AddTodoListAT | RemoveTodoListAT;\n\n\nexport const RemoveTaskAC = (taskID: string, toDoListID: string): RemoveTaskAT => {\n    return { type: 'REMOVE-TASK', taskID, toDoListID } as const;\n}\n\nexport const AddTaskAC = (title: string, toDoListID: string): AddTaskAT => {\n    return { type: 'ADD-TASK', title, toDoListID } as const;\n}\n\nexport const ChangeTaskTitleAC = (taskID: string, title: string, toDoListID: string): ChangeTaskTitleAT => {\n    return { type: 'CHANGE-TASK-TITLE', taskID, title, toDoListID } as const;\n}\n\nexport const ChangeTaskStatusAC = (taskID: string, isDone: boolean, toDoListID: string): ChangeTaskStatusAT => {\n    return { type: 'CHANGE-TASK-STATUS', taskID, isDone, toDoListID } as const;\n}\n\nexport const tasksReducer = (tasks = initialState, action: AllActionType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return { ...tasks, [action.toDoListID]: tasks[action.toDoListID].filter(task => task.id !== action.taskID) };\n\n        case 'ADD-TASK':\n            const newTask: TaskType = {\n                id: v1(),\n                title: action.title,\n                isDone: false,\n            }\n            return ({\n                ...tasks,\n                [action.toDoListID]: [newTask, ...tasks[action.toDoListID]]\n            });\n\n        case 'CHANGE-TASK-TITLE':\n            return {\n                ...tasks,\n                [action.toDoListID]: tasks[action.toDoListID].map(t => t.id === action.taskID ? { ...t, title: action.title } : t)\n            };\n\n        case 'CHANGE-TASK-STATUS':\n            return {\n                ...tasks,\n                [action.toDoListID]: tasks[action.toDoListID].map(t => t.id === action.taskID ? { ...t, isDone: action.isDone } : t)\n            };\n        case 'ADD-TODOLIST':\n            return {\n                ...tasks,\n                [action.todoListID]: [],\n            }\n        case 'REMOVE-TODOLIST':\n            delete tasks[action.id];\n            return { ...tasks }\n\n        default:\n            return tasks;\n    }\n\n}","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppRootStateType } from './store/store';\nimport { ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC } from './store/tasks-reducer';\nimport { TaskType } from './App';\nimport EditableSpan from './EditableSpan';\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\n\ntype TaskPropsType = {\n    key: string\n    todoListID: string\n    taskID: string\n}\n\nexport const TaskWithSelectors = React.memo(({ todoListID, taskID }: TaskPropsType) => {\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todoListID].filter(t => t.id === taskID)[0]);\n    let dispatch = useDispatch();\n\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(ChangeTaskTitleAC(task.id, title, todoListID));\n    }, [taskID, todoListID])\n\n    return (\n        <div className={task.isDone === true ? 'is-done' : ''} key={taskID}>\n            <Checkbox\n                checked={task.isDone}\n                onChange={(e) => {\n                    return dispatch(ChangeTaskStatusAC(taskID, e.currentTarget.checked, todoListID))}\n                    } />\n            {/* <input\n            type=\"checkbox\"\n            onChange={(e) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)}\n            checked={t.isDone}\n            value={t.title}\n        /> */}\n            <EditableSpan title={task.title} setNewTitle={changeTaskTitle} />\n            <IconButton onClick={() => dispatch(RemoveTaskAC(taskID, todoListID))}>\n                <Delete />\n            </IconButton>\n        </div>\n    )\n})\n//Вопрос!!e.currentTarget.checked","import React, { useCallback } from 'react';\nimport { TaskType, FilterValuesType } from './App';\nimport AddItemForm from './AddItemForm';\nimport EditableSpan from './EditableSpan';\nimport { Button, IconButton, ButtonGroup } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { Task } from './Task'\nimport {TaskWithSelectors} from './TaskWithSelectors';\n\ntype TodoListPropsType = {\n    title: string\n    id: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (taskID: string, toDoListID: string) => void\n    changeFilter: (filter: FilterValuesType, toDoListID: string) => void\n    addTask: (title: string, toDoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeToDoListTitle: (title: string, todoListID: string) => void\n    changeTaskTitle: (taskID: string, title: string, toDoListID: string) => void\n}\n\nconst ToDoList: React.FC<TodoListPropsType> = React.memo((props: TodoListPropsType) => {\n    console.log('Todolist')\n    let tasksForTodolist = props.tasks;\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter((t: TaskType) => t.isDone === false)\n    } else if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter((t: TaskType) => t.isDone === true)\n    }\n\n    // const changeTaskTitle = useCallback((taskID: string, title: string) => props.changeTaskTitle(taskID, title, props.id), [props.changeTaskTitle, props.id])\n    // const changeTaskStatus = useCallback((taskID: string, isDone: boolean) => props.changeTaskStatus(taskID, isDone, props.id), [props.changeTaskStatus, props.id])\n    // const removeTask = useCallback((taskID: string) => props.removeTask(taskID, props.id), [props.removeTask, props.id])\n\n    const tasksJSXelements = tasksForTodolist.map(task =>\n        <TaskWithSelectors key={task.id}\n        todoListID={props.id}\n        taskID={task.id}/>\n    )\n                // key={task.id}\n            // todoListID={props.id}\n            // task={task}\n            // changeTaskTitle={changeTaskTitle}\n            // changeTaskStatus={changeTaskStatus}\n            // removeTask={removeTask}\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id])\n\n    const removeTodoList = useCallback(() => props.removeTodoList(props.id), [props.id]);\n    const setAll = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter]);\n    const setActive = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter]);\n    const setCompleted = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter]);\n    // const classForAll = props.filter === 'all' ? 'active-filter' : '';\n    // const classForActive = props.filter === 'active' ? 'active-filter' : '';\n    // const classForCompleted = props.filter === 'completed' ? 'active-filter' : '';\n\n    const changeToDoListTitle = useCallback((title: string) => {\n        props.changeToDoListTitle(title, props.id)\n    }, [props.changeToDoListTitle, props.id])\n\n    return (\n        <div className='toDoList'>\n            <div>\n                <h3><EditableSpan title={props.title} setNewTitle={changeToDoListTitle} /></h3>\n                <IconButton onClick={removeTodoList}>\n                    <Delete />\n                </IconButton>\n            </div>\n            <AddItemForm addItem={addTask} />\n            <ul>\n                {tasksJSXelements}\n            </ul>\n            <div>\n                <ButtonGroup\n                    variant={'contained'}\n                    size={'small'}>\n                    <Button\n                        variant={props.filter === 'all' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setAll}>All</Button>\n                    <Button\n                        variant={props.filter === 'active' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setActive}>Active</Button>\n                    <Button\n                        variant={props.filter === 'completed' ? 'outlined' : 'contained'}\n                        color='secondary'\n                        onClick={setCompleted}>Completed</Button>\n                </ButtonGroup>\n            </div>\n        </div>\n    )\n})\nexport default ToDoList;\n\n\n\n\n\n","import React, { useCallback } from 'react';\nimport './App.css';\nimport ToDoList from './ToDoList';\nimport AddItemForm from './AddItemForm';\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from \"@material-ui/icons\";\nimport { RemoveTodolistAC, AddTodoListAC, ChangeTodolistTitleAC, ChangeFinterAC } from './store/todolists-reducer';\nimport { ChangeTaskTitleAC, ChangeTaskStatusAC, RemoveTaskAC, AddTaskAC } from './store/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from './store/store';\n\nexport type TaskType = {\n    id: string,\n    title: string,\n    isDone: boolean,\n}\nexport type TodoListType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType,\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\nexport type FilterValuesType = 'all' | 'active' | 'completed'\n\nfunction AppWithRedux() {\n    console.log('App With redux')\n\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists);\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n\n    const dispatch = useDispatch();\n\n    const removeTask = useCallback((taskID: string, toDoListID: string) => {\n        dispatch(RemoveTaskAC(taskID, toDoListID));\n    }, [dispatch]);\n\n    const addTask = useCallback((title: string, toDoListID: string) => {\n        dispatch(AddTaskAC(title, toDoListID));\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean, toDoListID: string) => {\n        dispatch(ChangeTaskStatusAC(taskID, isDone, toDoListID));\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((taskID: string, title: string, toDoListID: string) => {\n        dispatch(ChangeTaskTitleAC(taskID, title, toDoListID))\n    }, [dispatch])\n\n    const changeFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\n        dispatch(ChangeFinterAC(todoListID, filter));\n    }, [dispatch])\n\n    const changeToDoListTitle = useCallback((title: string, todoListID: string) => {\n        dispatch(ChangeTodolistTitleAC(title, todoListID));\n    }, [dispatch])\n\n    const removeTodoList = useCallback((todoListID: string) => {\n        dispatch(RemoveTodolistAC(todoListID));\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(AddTodoListAC(title));\n    }, [dispatch])\n\n    const todoListsComponents = todoLists.map(t => {\n        let tasksForRender: Array<TaskType> = tasks[t.id];\n\n        return (\n            <Grid item>\n                <Paper style={{ padding: '15px' }}>\n                    <ToDoList\n                        key={t.id}\n                        id={t.id}\n                        filter={t.filter}\n                        title={t.title}\n                        tasks={tasksForRender}\n                        addTask={addTask}\n                        removeTask={removeTask}\n                        changeTaskStatus={changeTaskStatus}\n                        changeFilter={changeFilter}\n                        removeTodoList={removeTodoList}\n                        changeTaskTitle={changeTaskTitle}\n                        changeToDoListTitle={changeToDoListTitle}\n                    />\n                </Paper>\n            </Grid>)\n    })\n\n    return (\n        <div className='App'>\n            <AppBar position=\"sticky\">\n                <Toolbar style={{ justifyContent: \"space-between\" }}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolists\n                    </Typography>\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{ padding: '15px' }}>\n                    <AddItemForm addItem={addTodoList} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {todoListsComponents}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { combineReducers, createStore } from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n\n//@ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './ToDoList.module.css';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store'\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux />\r\n</Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}